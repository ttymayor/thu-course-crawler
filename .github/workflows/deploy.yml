name: Release and Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync

      - name: Build package
        run: |
          uv build

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r . deployment/
          cd deployment
          # 清理不需要的檔案
          rm -rf .git .github __pycache__ *.pyc .env
          tar -czf ../thu-course-crawler-${{ github.sha }}.tar.gz .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: thu-course-crawler-${{ github.sha }}.tar.gz
          retention-days: 30

    # 如果你有 Docker，可以取消下面的註解
    # - name: Build Docker image
    #   run: |
    #     docker build -t thu-course-crawler:${{ github.sha }} .
    #     docker tag thu-course-crawler:${{ github.sha }} thu-course-crawler:latest

    # - name: Push to registry
    #   run: |
    #     echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    #     docker push thu-course-crawler:${{ github.sha }}
    #     docker push thu-course-crawler:latest

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()

    steps:
      - name: Notify success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          # 這裡可以加入 Slack, Discord, 或 Email 通知

      - name: Notify failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # 這裡可以加入錯誤通知
